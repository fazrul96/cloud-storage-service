spring:
  profiles:
    active: ${ACTIVE_PROFILE:@activeProfiles@}
  application:
    name: storage-service
  cloud:
    aws:
      region:
        static: ${AWS_DEFAULT_REGION}
      s3:
        bucket-name: ${AWS_BUCKET_NAME}
  datasource:
    batch:
      jdbc-url: ${DATASOURCE_BATCH_JDBC_URL_BASE}
      username: ${DATASOURCE_BATCH_DB_APP_USERNAME}
      password: ${DATASOURCE_BATCH_DB_APP_PASSWORD}
      connection-timeout: ${DATASOURCE_CONN_TIMEOUT}
      maximum-pool-size: ${DATASOURCE_READER_POOL_SIZE}
      idle-timeout: ${DATASOURCE_READER_POOL_IDLE_TIMEOUT}
      minimum-idle: ${DATASOURCE_READER_POOL_MINIMUM_IDLE}
      max-lifetime: ${DATASOURCE_MAX_LIFETIME}
      driver-class-name: com.mysql.cj.jdbc.Driver
    portfolio:
      jdbc-url: ${DATASOURCE_PORTFOLIO_JDBC_URL_BASE}
      username: ${DATASOURCE_PORTFOLIO_DB_APP_USERNAME}
      password: ${DATASOURCE_PORTFOLIO_DB_APP_PASSWORD}
      connection-timeout: ${DATASOURCE_CONN_TIMEOUT}
      maximum-pool-size: ${DATASOURCE_READER_POOL_SIZE}
      idle-timeout: ${DATASOURCE_READER_POOL_IDLE_TIMEOUT}
      minimum-idle: ${DATASOURCE_READER_POOL_MINIMUM_IDLE}
      max-lifetime: ${DATASOURCE_MAX_LIFETIME}
      driver-class-name: com.mysql.cj.jdbc.Driver
    management:
      jdbc-url: ${DATASOURCE_MANAGEMENT_JDBC_URL_BASE}
      username: ${DATASOURCE_MANAGEMENT_DB_APP_USERNAME}
      password: ${DATASOURCE_MANAGEMENT_DB_APP_PASSWORD}
      connection-timeout: ${DATASOURCE_CONN_TIMEOUT}
      maximum-pool-size: ${DATASOURCE_READER_POOL_SIZE}
      idle-timeout: ${DATASOURCE_READER_POOL_IDLE_TIMEOUT}
      minimum-idle: ${DATASOURCE_READER_POOL_MINIMUM_IDLE}
      max-lifetime: ${DATASOURCE_MAX_LIFETIME}
      driver-class-name: com.mysql.cj.jdbc.Driver
    insurance:
      jdbc-url: ${DATASOURCE_INSURANCE_JDBC_URL_BASE}
      username: ${DATASOURCE_INSURANCE_DB_APP_USERNAME}
      password: ${DATASOURCE_INSURANCE_DB_APP_PASSWORD}
      connection-timeout: ${DATASOURCE_CONN_TIMEOUT}
      maximum-pool-size: ${DATASOURCE_READER_POOL_SIZE}
      idle-timeout: ${DATASOURCE_READER_POOL_IDLE_TIMEOUT}
      minimum-idle: ${DATASOURCE_READER_POOL_MINIMUM_IDLE}
      max-lifetime: ${DATASOURCE_MAX_LIFETIME}
      driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc.time_zone: Asia/Singapore
        format_sql: true
    open-in-view: false
  data:
    rest:
      base-path: ${DATA_REST_BASE_PATH}
    redis:
      host: redis
      port: 6379
  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    mailtrap:
      api-base-url: ${MAILTRAP_BASE_URL:https://mailtrap.io/api/}
      api-token: ${MAILTRAP_TOKEN:cf6535f12ab5989276437edf48a92cbb}
      account-id: ${MAILTRAP_ACCOUNT_ID:263159}
      inbox-id: ${MAILTRAP_INBOX_ID:1273110}
  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB
  config:
    import: file:/app/common-config/spring-boot/${spring.profiles.active}/deployment.properties
#    import: file:C:\\Users\\ICAM\\workspace\\common-config\\spring-boot\\local\\deployment.properties
  cache:
    type: redis
app:
  basePath: ${APP_REACT_BASE_PATH}
  base-flask-path: ${APP_FLASK_BASE_PATH}
  apiPath: ${APP_API_PATH}
  privateApiPath: ${APP_PRIVATE_API_PATH}
  publicApiPath: ${APP_PUBLIC_API_PATH}

logging:
  level:
#    com.example.demo: ${LOGGING_LEVEL_APP_DEMO}
    org.springframework.web: ${LOGGING_LEVEL_APP_WEB}
    org.springframework.security: ${LOGGING_LEVEL_APP_SECURITY}
    org.springframework.web.cors: ${LOGGING_LEVEL_APP_WEB_CORS}
#    io.minio: ${LOGGING_LEVEL_APP_MINIO}
    org.springframework.jdbc.core: DEBUG
#    org.hibernate.SQL: DEBUG
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.batch: ERROR
    root: ${LOGGING_LEVEL_APP_ROOT}
#  file: app.log
#  config: classpath:logback-spring.xml

aws:
  access-key: ${AWS_ACCESS_KEY}
  secret-key: ${AWS_SECRET_KEY}
  bucket-name: ${AWS_BUCKET_NAME}
  region: ${AWS_REGION:ap-southeast-1}
  root-folder: ${AWS_S3_ROOT_FOLDER}

minio:
  endpoint: ${MINIO_ENDPOINT}
  access-key: ${MINIO_ACCESS_KEY}
  secret-key: ${MINIO_SECRET_KEY}
  bucket-name: ${MINIO_BUCKET_NAME}
  username: ${MINIO_USERNAME}
  password: ${MINIO_PASSWORD}

management:
  endpoints:
    web:
      exposure:
        include: health, info, caches

server:
  port: 8080
  address: 0.0.0.0

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    display-request-duration: true
    persist-authorization: true