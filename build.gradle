import org.apache.tools.ant.filters.ReplaceTokens
import java.text.DecimalFormat

plugins {
	id 'java'
    id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
}

group = 'com.cloud'
version = project.hasProperty('version') ? project.getProperty('version') : '1.0.0'

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

ext {
    snippetsDir = file('build/generated-snippets')

    SPRING_CLOUD_IO_AWS_VERSION = '3.1.0'
    SPRING_CLOUD_ORG_AWS_VERSION = '2.2.6.RELEASE'
    SPRING_CLOUD_VERSION = '2022.0.0'
}

ext['tess4j.version'] = '5.11.0'

repositories {
	mavenCentral()
}

configurations.configureEach {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:auth'
    implementation 'software.amazon.awssdk:costexplorer'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${SPRING_CLOUD_IO_AWS_VERSION}"
        mavenBom "org.springframework.cloud:spring-cloud-aws-dependencies:${SPRING_CLOUD_ORG_AWS_VERSION}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${SPRING_CLOUD_VERSION}"
    }
}

jar {
    enabled = false
}

jacoco {
    toolVersion = "0.8.9"
}

def activeProfiles = project.properties['activeProfiles'] ?: "prd"

processResources {
    filter ReplaceTokens, tokens: [
            activeProfiles: activeProfiles
    ]
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        html.required = true
    }
    outputs.dir snippetsDir
    systemProperty'flyway.scripts.location', System.getProperty(
            'flyway.scripts.location', 'filesystem:./src/test/resources/sql-scripts')
    systemProperty "user.country", "MY"
    systemProperty "user.language", "en"
    systemProperty "user.timeznone", "Asia/Singapore"
}

checkstyle {
    ignoreFailures = false
    showViolations = true
}

pmd {
    ignoreFailures = false
    ruleSetFiles = files('config/pmd/java-rules.xml')
    ruleSets = []
    rulesMinimumPriority = 4
    consoleOutput = true
    toolVersion = '6.55.0'
}

pmdTest {
    rulesMinimumPriority = 2
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.withType(Pmd) {
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestReport {
    dependsOn jacocoTestCoverageVerification
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    def minCov = findProperty('minCov') ?: '0.0'
    DecimalFormat decimalFormat = new DecimalFormat('#')
    def minimumCoverage = decimalFormat.parse(minCov).doubleValue()
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = minimumCoverage
            }
        }
    }
    def exclusions = [
            "**/*Application.*",
            "**/dto/**",
            "**/config/**",
            "**/constants/**",
            "**/properties/**",
            "**/data/**",
    ]
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: exclusions)
        }))
    }
}

check.dependsOn jacocoTestReport

task wrapperUpdate(type: Wrapper) {
    gradleVersion = '8.7'
}